#!/bin/bash
#
#  Kimberley
#
#  Copyright (c) 2008-2009 Carnegie Mellon University
#  All rights reserved.
#
#  Kimberley is free software: you can redistribute it and/or modify
#  it under the terms of version 2 of the GNU General Public License
#  as published by the Free Software Foundation.
#
#  Kimberley is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Kimberley. If not, see <http://www.gnu.org/licenses/>.
#

########################################################################
# dekimberlize
#
# A script that applies a Kimberlized virtual machine overlay to a base
# virtual machine in order to install an application and its
# dependencies on-the-fly.
#



########################################################################
# Functions to simplify code.
#


#
## Print the command's syntax.
#

usage()
{
    echo "usage: dekimberlize [-a floppy-file] [-d encryption-key-file] <[-f patch-file] || [-i URL]> <vm-name>"
}


#
## Cleanup any loose state and fail with bad exit status.
#

failure()
{
    rm -f /tmp/dekimberlize.lock
    exit 1
}


#
## Poll VirtualBox about a VM until it is has changed to the state we want.
##   $1: The vm's state
##   $2: The vm's name or UUID
##   $3: The number of seconds until timeout
##   $?: 1 if running, 0 if not
#
sleep_until_vm()
{
    for ((i=0;i<$3;i+=1)); do
	state=$(VBoxManage showvminfo "$2" -machinereadable | \
			sed -ne 's/^VMState="\(.*\)"/\1/p')
	[ "$state" = "$1" ] && return 1
        sleep 0.1s
    done
    return 0
}


gettimeofday()
{
    echo $(date +"%F %T.%N") $*
}

########################################################################
# Beginning of actual dekimberlize script execution
#

if [ $# -lt 3 ]; then
	usage
	exit 1
fi

gettimeofday "dekimberlize loaded" > /tmp/dekimberlize.log

#
## Default variables for managing floppy disk attachment
## and binary difference detection.
#

floppy_original=""
floppy_copy=""
floppy_diff=""
overlay_file=""
decryption_keyfile=""

########################################################################
# Process command-line options.
#

gettimeofday "dekimberlize parsing options" >> /tmp/dekimberlize.log

while getopts ":a:d:f:i:h" Option
do
  case $Option in

      a)

        floppy_original="$OPTARG"
        floppy_copy="${OPTARG}.new"
        floppy_diff="${OPTARG}.diff"

        echo
        echo "PARAM: floppy disk image file '$floppy_original'.."
        ;;

    
      d)

        decryption_keyfile="$OPTARG"
        echo
        echo "PARAM: decryption key in file '$decryption_keyfile'.."
        ;;
        
 
      f)

        if [ "$overlay_file" != "" ]; then
            echo
            echo "Please specify only one VM overlay input method!"
            exit 1
        fi
        
        overlay_file="$OPTARG"
        echo
        echo "PARAM: VM overlay file '$overlay_file'.."
        ;;
        
        
      i)

        if [ "$overlay_file" != "" ]; then
            echo
            echo "Please specify only one VM overlay input method!"
            exit 1
        fi
        
        overlay_file=/tmp/$(basename "$OPTARG")
        echo
        echo "PARAM: VM overlay URL '$overlay_file'.."
	gettimeofday "dekimberlize fetching VM overlay from URL" >> /tmp/dekimberlize.log
        wget -O "$overlay_file" $OPTARG
	gettimeofday "dekimberlize completed fetching VM overlay from URL" >> /tmp/dekimberlize.log
        ;;

      h)
        usage
        exit 0
        ;;
      ?)
        usage
        exit 0
        ;;
    esac
done
shift $(($OPTIND-1))

gettimeofday "dekimberlize finished parsing options" >> /tmp/dekimberlize.log


########################################################################
# Check to see the environment is acceptable to execute in, i.e. that
# another dekimberlize process isn't already running, that necessary
# files exist in expected places, etc.
#

echo
vmname="$1"
vmpath="$HOME/.VirtualBox/Machines/$vmname"

if [ -d "$vmpath" ]; then
	echo "Found:  $vmpath"
else
	echo "!! Could not find:"
	echo "       $vmpath"
	echo "   Please check the name of your virtual machine."
	exit 1
fi

if [ -e "$vmpath/$vmname.xml" ]; then
	echo "Found:  $vmpath/$vmname.xml"
else
	echo "!! Could not find:"
	echo "       $vmpath/$vmname.xml"
	echo "   Please check that your VM state is not corrupt."
	exit 1
fi

if [ -e /tmp/dekimberlize.lock ]; then
	echo "!! Found:"
	echo "       /tmp/dekimberlize.lock"
	echo "   Another kimberlized application is running within VirtualBox."
    echo "   Please finish using it before trying another application."
	exit 1	
fi

touch /tmp/dekimberlize.lock
rm -f /tmp/dekimberlize_finished
rm -f /tmp/dekimberlize.resumed


########################################################################
# Apply kimberlized tarball to the specified VM,
# decrypting and decompressing first if necessary.
#

#
## Create a base snapshot in the VM
#
echo
echo "Checking snapshots for VM '$vm_name'.."
VBoxManage snapshot "$vm_name" showvminfo "kimberley base snapshot" > /dev/null
if [ $? -ne 0 ]; then
	echo
	echo "Snapshotting VM '$vm_name'.."
	VBoxManage snapshot "$vm_name" take "kimberley base snapshot" > /dev/null
fi

# revert back to the base snapshot state
VBoxManage snapshot "$vm_name" discardcurrent -state > /dev/null
if [ $? -ne 0 ]; then
	echo `basename $0`: error: failed taking VM snapshot
    exit 1
fi

base_snapshot_uuid=$(VBoxManage showvminfo "$vmname" -machinereadable |
	sed -ne 's/^SnapshotUUID="\(.*\)"$/\1/p')
base_mem_state="$vmpath/Snapshots/{$base_snapshot_uuid}.sav"

curr_snapshot_uuid=$(VBoxManage showvminfo "$vmname" -machinereadable |
	sed -ne 's/^UUID="\(.*\)"$/\1/p')
curr_mem_state="$vmpath/Snapshots/{$curr_snapshot_uuid}.sav"

disk_snapshot_uuid=$(cat "$vmpath/$vmname.xml" | 
	sed -ne 's/.*<HardDiskAttachment hardDisk="{\(.*\)}" .*/\1/p' | tail -1)
disk_snapshot_file="$vmpath/Snapshots/{$disk_snapshot_uuid}.vdi"

decrypt()
{
    if [ "$decryption_keyfile" != "" ]; then
	openssl enc -aes-128-cbc -d -pass "file:$decryption_keyfile"
    else
	cat
    fi
}

decompress()
{
    compressed=$(echo "$overlay_file" | grep lzma)
    if [ "$compressed" != "" ]; then
	lzma -dc
    else
	cat
    fi
}

echo
echo "Unpacking VM overlay.."
gettimeofday "dekimberlize unpacking VM overlay" >> /tmp/dekimberlize.log

mkdir -p /tmp/dekimberlize
cat "$overlay_file" | decrypt | decompress | tar -xf - -C /tmp/dekimberlize

gettimeofday "dekimberlize completed unpacking VM overlay" >> /tmp/dekimberlize.log

overlay_mem_state="/tmp/dekimberlize/$vmname/${curr_snapshot_uuid}.diff"
overlay_disk_file="/tmp/dekimberlize/$vmname/overlay.vdi"

gettimeofday "dekimberlize patching VM overlay" >> /tmp/dekimberlize.log

echo
echo "Applying VM overlay"
xdelta patch "$overlay_mem_state" "$base_mem_state" "$curr_mem_state"
cp "$overlay_disk_file" "$disk_snapshot_file"

gettimeofday "dekimberlize completed patching VM overlay" >> /tmp/dekimberlize.log

rm -rf /tmp/dekimberlize

########################################################################
# Launch VM using VirtualBox now that the application of the VM
# overlay is complete.
#

echo
echo "Resuming VM '$vmname'.."
gettimeofday "dekimberlize resuming VM" >> /tmp/dekimberlize.log
VBoxManage startvm "$vmname" > /dev/null
if [ $? -ne 0 ]; then
    echo `basename $0`: error: failed resuming VM
    failure 
fi


sleep_until_vm running "$vmname" 300
if [ $? -ne 1 ]; then
    echo "VM did not load! Stopping Dekimberlize process.."
    failure
fi

echo 1234 > /tmp/dekimberlize.resumed

gettimeofday "dekimberlize completed resuming VM" >> /tmp/dekimberlize.log


#
## Copy and attach a floppy disk image to a running VM, if
## the user has provided one.
#

if [ "$floppy_original" != "" ]; then

    echo
    echo "Copying original '$floppy_original' to mutable '$floppy_copy'.."
    cp "$floppy_original" "$floppy_copy"


    echo
    echo "Waiting for VM to load.."

    echo
    echo "Attaching floppy disk '$floppy_original' to VM.."
    gettimeofday "dekimberlize attaching floppy to VM" >> /tmp/dekimberlize.log
    VBoxManage controlvm "$vmname" floppyattach "$floppy_copy"
    if [ $? -ne 0 ]; then
    	echo `basename $0`: error: failed attaching floppy disk 
    fi
    gettimeofday "dekimberlize completed attaching floppy to VM" >> /tmp/dekimberlize.log
else
    echo
    echo "Not attaching floppy disk to VM.."
fi


########################################################################
# Wait for the user to complete his interaction by waiting for the
# launcher application to signal us that the connection has been closed.
# This is done by touching /tmp/dekimberlize_finished in the host.
#

echo
echo "VM loaded! Waiting for the user to finish.."
gettimeofday "dekimberlize beginning user interaction" >> /tmp/dekimberlize.log
while [ ! -e /tmp/dekimberlize_finished ]; do
	printf . || true
	sleep 1s
done
gettimeofday "dekimberlize ending user interaction" >> /tmp/dekimberlize.log

echo
echo "The user has ended the session."


########################################################################
# Now clean up, discard the dirty state
#

#
## Detach floppy disk image.  This must be done while the virtual
## machine is running.
#

if [ "$floppy_original" != "" ]; then
    echo
    echo "Detaching floppy disk from VM.."

    gettimeofday "dekimberlize detaching floppy from VM" >> /tmp/dekimberlize.log
    VBoxManage controlvm "$vmname" floppyattach none
    if [ $? -ne 0 ]; then
        echo `basename $0`: error: failed attaching floppy disk
    fi
    gettimeofday "dekimberlize completed detaching floppy from VM" >> /tmp/dekimberlize.log
fi


#
## Power down VM as quickly as possible.
#

echo
echo "Powering VM $vmname down.."
gettimeofday "dekimberlize powering down VM" >> /tmp/dekimberlize.log
VBoxManage controlvm "$vmname" poweroff
if [ $? -ne 0 ]; then
    echo `basename $0`: error: failed powering VM down
    failure
fi


#
## Wait for powerdown to complete.
#

sleep_until_vm poweroff "$vmname" 300
if [ $? -ne 1 ]; then
    echo "VM did not stop! Stopping Dekimberlize process.."
    failure
fi
gettimeofday "dekimberlize completed powering down VM" >> /tmp/dekimberlize.log

sleep 10

#
## Unregister floppy disk image (registering is a side effect 
## of attachment).
#

if [ "$floppy_original" != "" ]; then
    echo
    echo "Unregistering floppy disk with VirtualBox.."

    gettimeofday "dekimberlize unregistering floppy disk" >> /tmp/dekimberlize.log
    VBoxManage unregisterimage floppy "$floppy_copy"
    if [ $? -ne 0 ]; then
        echo `basename $0`: error: failed attaching floppy disk
    fi
    gettimeofday "dekimberlize completed unregistering floppy" >> /tmp/dekimberlize.log

    #
    ## Calculate the binary difference of the floppy image against a copy
    ## of itself saved before attachment.
    #

    echo
    echo "Calculating the floppy's binary difference in file '$floppy_diff'.."
    gettimeofday "dekimberlize calculating floppy delta" >> /tmp/dekimberlize.log
    xdelta delta "$floppy_original" "$floppy_copy" "$floppy_diff"
    gettimeofday "dekimberlize completed calculating floppy delta" >> /tmp/dekimberlize.log
fi


#
## Revert the snapshot taken in the Kimberlize process, restoring the
## virtual machine to its base image.
#

echo
echo "Discarding dirty state and restoring the original VM image.."
gettimeofday "dekimberlize reverting to base VM" >> /tmp/dekimberlize.log
VBoxManage snapshot "$vmname" discardcurrent --state 
if [ $? -ne 0 ]; then
    echo `basename $0`: error: failed discarding VM state
    failure 
fi
gettimeofday "dekimberlize completed reverting to base VM" >> /tmp/dekimberlize.log

rm -f /tmp/dekimberlize.lock


echo
echo "Complete!"

gettimeofday "dekimberlize completed" >> /tmp/dekimberlize.log

########################################################################
# Miscellaneous Information:
#
# *.vdi represent virtual disk images.  The oldest is the original install,
#   stored in a user's ~/.VirtualBox/VDI/ directory.  It is kept pristine.
#   The active difference file is updated whenever the virtual disk is written,
#   and copied to a saved file whenever a snapshot is taken.
#
# *.sav represent saved runtime state, including both in-memory and on-disk
#   changes.  During snapshot, the entire file is saved, with on-disk changes
#   also replicated into a .vdi file.  They average 200-300 MB.
#
# It is expected that the launcher running on a display will hoard the
# "generic" pristine .vdi file as well as the snapshotted memory state.
#
