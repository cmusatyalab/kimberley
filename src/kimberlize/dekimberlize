#!/bin/bash

########################################################################
# dekimberlize
#
# A script that applies a Kimberlized virtual machine overlay to a base
# virtual machine in order to install an application and its
# dependencies on-the-fly.
#



########################################################################
# Functions to simplify code.
#


#
## Print the command's syntax.
#

usage()
{
    echo "usage: dekimberlize [-a floppy-file] [-d encryption-key-file] <[-f patch-file] || [-i URL]> <vm-name>"
}


#
## Cleanup any loose state and fail with bad exit status.
#

failure()
{
    rm -f /tmp/dekimberlize.lock
    exit 1
}


#
## Check whether a virtual machine is running.  
##   $1: The vm's name or UUID
##   $?: 1 if running, 0 if not
#

vm_running()
{
    uuid=`VBoxManage showvminfo $1 | grep UUID | head -1 | sed -e 's/ //g' | cut -f2 -d':'`
    running=`VBoxManage list runningvms | grep $uuid`

    if [ "$uuid" = "$running" ]; then
        return 1
    fi

    return 0
}


#
## Poll VirtualBox about a VM until it is running.
##   $1: The vm's name or UUID
##   $2: The number of seconds until timeout
##   $?: 1 if running, 0 if not
#

sleep_until_vm_running()
{
    for ((i=0;i<$2;i+=1)); do
        vm_running $1
        vm_status=$?

        if [ $vm_status -eq 1 ]; then
            return 1
        fi
        sleep 0.001s
    done

    return 0
}


#
## Poll VirtualBox about a VM until it is stopped.
##   $1: The vm's name or UUID
##   $2: The number of seconds until timeout
##   $?: 1 if stopped, 0 if not
#

sleep_until_vm_stopped()
{
    for ((i=0;i<$2;i+=1)); do
        vm_running $1
        vm_status=$?

        if [ $vm_status -eq 0 ]; then
            return 1
        fi
        sleep 0.001s
    done

    return 0
}


########################################################################
# Beginning of actual dekimberlize script execution
#

gettimeofday "dekimberlize loaded" > /tmp/dekimberlize.log
    
if [ $# -lt 3 ]; then
	usage
	exit 1
fi


homedir=`printenv HOME`


#
## Default variables for managing floppy disk attachment
## and binary difference detection.
#

floppy_original=""
floppy_copy=""
floppy_diff=""
overlay_file=""
decryption_keyfile=""

########################################################################
# Process command-line options.
#

gettimeofday "dekimberlize parsing options" >> /tmp/dekimberlize.log

while getopts ":a:d:f:i:h" Option
do
  case $Option in

      a)

        floppy_original=$OPTARG
        floppy_copy="${OPTARG}.new"
        floppy_diff="${OPTARG}.diff"

        echo
        echo "PARAM: floppy disk image file '$floppy_original'.."
        ;;

    
      d)

        decryption_keyfile=$OPTARG
        echo
        echo "PARAM: decryption key in file '$decryption_keyfile'.."
        ;;
        
 
      f)

        if [ "$overlay_file" != "" ]; then
            echo
            echo "Please specify only one VM overlay input method!"
            exit 1
        fi
        
        overlay_file=$OPTARG
        echo
        echo "PARAM: VM overlay file '$overlay_file'.."
        ;;
        
        
      i)

        if [ "$overlay_file" != "" ]; then
            echo
            echo "Please specify only one VM overlay input method!"
            exit 1
        fi
        
        overlay_file=`basename $OPTARG`
        echo
        echo "PARAM: VM overlay URL '$overlay_file'.."
        wget -O /tmp/$overlay_file $OPTARG
        overlay_file=/tmp/$overlay_file
        ;;


      h)
        usage
        exit 0
        ;;

	    
      ?)
        usage
        exit 1
        ;;

    esac
done
shift $(($OPTIND-1))

gettimeofday "dekimberlize finished parsing options" >> /tmp/dekimberlize.log


########################################################################
# Check to see the environment is acceptable to execute in, i.e. that
# another dekimberlize process isn't already running, that necessary
# files exist in expected places, etc.
#

echo

if [ -d $homedir/.VirtualBox/Machines/$1/ ]; then
	echo "Found:  $homedir/.VirtualBox/Machines/$1/"
else
	echo "!! Could not find:"
	echo "       $homedir/.VirtualBox/Machines/$1/"
	echo "   Please check the name of your virtual machine."
	exit 1
fi

if [ -e $homedir/.VirtualBox/Machines/$1/$1.xml ]; then
	echo "Found:  $homedir/.VirtualBox/Machines/$1/$1.xml"
else
	echo "!! Could not find:"
	echo "       $homedir/.VirtualBox/Machines/$1/$1.xml"
	echo "   Please check that your VM state is not corrupt."
	exit 1
fi

if [ -e /tmp/dekimberlize.lock ]; then
	echo "!! Found:"
	echo "       /tmp/dekimberlize.lock"
	echo "   Another kimberlized application is running within VirtualBox."
    echo "   Please finish using it before trying another application."
	exit 1	
fi

touch /tmp/dekimberlize.lock
rm -f /tmp/dekimberlize_finished


########################################################################
# Apply kimberlized tarball to the specified VM,
# decrypting and decompressing first if necessary.
#


if [ "$decryption_keyfile" != "" ]; then

    echo "Decrypting.."
    output_file=`echo $overlay_file | sed 's/.enc//g'`

    gettimeofday "dekimberlize decrypting VM overlay" >> /tmp/dekimberlize.log
    openssl enc -aes-128-cbc -d -pass file:$decryption_keyfile -in $overlay_file -out $output_file
    gettimeofday "dekimberlize completed decrypting VM overlay" >> /tmp/dekimberlize.log

    rm $overlay_file
    overlay_file=$output_file
    echo " - Created decrypted VM overlay file: $overlay_file"
fi


echo
echo "Checking for compression.."
compressed=`echo $overlay_file | grep lzma`
if [ "$compressed" != "" ]; then
    echo "Decompressing.."
    target_file=`echo $overlay_file | sed 's/.lzma//g'`
    gettimeofday "dekimberlize uncompressing VM overlay" >> /tmp/dekimberlize.log
    lzcat -d $overlay_file > $target_file
    gettimeofday "dekimberlize completed uncompressing VM overlay" >> /tmp/dekimberlize.log
    rm $overlay_file
    overlay_file=$target_file
    echo " - Created decompressed VM overlay file: $overlay_file"
fi


#
## Untar into VM's directory;  this will overwrite the .xml metadata file,
## add the Snapshots/*.vdi binary difference files to the disk state, and
## also add a .diff file repesenting the binary difference in memory state,
## which must be applied with xdelta.  Also, save the names of files
## we create.
#

echo
echo "Untarring.."
gettimeofday "dekimberlize untarring/patching VM overlay" >> /tmp/dekimberlize.log
tar xf $overlay_file -C $homedir/.VirtualBox/Machines/

mem_snapshot_uuid=`tar tf $overlay_file | grep .diff | cut -f3 -d'/' | cut -f1 -d'.'`
mem_current_uuid=`cat $homedir/.VirtualBox/Machines/$1/$1.xml | grep stateFile | head -1 | cut -f12 -d'"' | cut -f2 -d'{' | cut -f1 -d'}'`
mem_current_file=$homedir/.VirtualBox/Machines/$1/Snapshots/{$mem_current_uuid}.sav
mem_snapshot_diff=$homedir/.VirtualBox/Machines/$1/Snapshots/${mem_snapshot_uuid}.diff
mem_snapshot_file=$homedir/.VirtualBox/Machines/$1/Snapshots/{$mem_snapshot_uuid}.sav
echo "Moving current memory state:"
echo "      $mem_current_file "
echo "  to snapshot:"
echo "      $mem_snapshot_file"
mv $mem_current_file $mem_snapshot_file

mv $homedir/.VirtualBox/Machines/$1/VirtualBox.xml $homedir/.VirtualBox/

gettimeofday "dekimberlize completed untarring VM overlay" >> /tmp/dekimberlize.log

echo
echo "Applying delta ($mem_snapshot_diff) of memory state.."
xdelta patch $mem_snapshot_diff $mem_snapshot_file $mem_current_file
chmod 600 $mem_current_file
rm $mem_snapshot_diff
gettimeofday "dekimberlize completed patching VM overlay" >> /tmp/dekimberlize.log


echo
echo "Port forwarding (host:2222 -> guest:22).."
VBoxManage setextradata $1 "VBoxInternal/Devices/pcnet/0/LUN#0/Config/diamond_ssh/HostPort" 2222 > /dev/null
VBoxManage setextradata $1 "VBoxInternal/Devices/pcnet/0/LUN#0/Config/diamond_ssh/GuestPort" 22 > /dev/null
VBoxManage setextradata $1 "VBoxInternal/Devices/pcnet/0/LUN#0/Config/diamond_ssh/Protocol" TCP > /dev/null


########################################################################
# Launch VM using VirtualBox now that the application of the VM
# overlay is complete.
#

echo
echo "Resuming VM '$1'.."
gettimeofday "dekimberlize resuming VM" >> /tmp/dekimberlize.log
VBoxManage startvm $1 > /dev/null
if [ $? -ne 0 ]; then
    echo `basename $0`: error: failed resuming VM
    failure 
fi


sleep_until_vm_running $1 300
if [ $? -ne 1 ]; then
    echo "VM did not load! Stopping Dekimberlize process.."
    failure
fi

touch /tmp/dekimberlize.resumed

gettimeofday "dekimberlize completed resuming VM" >> /tmp/dekimberlize.log


#
## Copy and attach a floppy disk image to a running VM, if
## the user has provided one.
#

if [ $floppy_original != "" ]; then

    echo
    echo "Copying original '$floppy_original' to mutable '$floppy_copy'.."
    cp $floppy_original $floppy_copy


    echo
    echo "Waiting for VM to load.."

    echo
    echo "Attaching floppy disk '$floppy_original' to VM.."
    gettimeofday "dekimberlize attaching floppy to VM" >> /tmp/dekimberlize.log
    VBoxManage controlvm $1 floppyattach $floppy_copy
    if [ $? -ne 0 ]; then
    	echo `basename $0`: error: failed attaching floppy disk 
    fi
    gettimeofday "dekimberlize completed attaching floppy to VM" >> /tmp/dekimberlize.log
else
    echo
    echo "Not attaching floppy disk to VM.."
fi


########################################################################
# Wait for the user to complete his interaction by waiting for the
# launcher application to signal us that the connection has been closed.
# This is done by touching /tmp/dekimberlize_finished in the host.
#

echo
echo "VM loaded! Waiting for the user to finish.."
gettimeofday "dekimberlize beginning user interaction" >> /tmp/dekimberlize.log
while [ ! -e /tmp/dekimberlize_finished ]; do
	printf . || true
	sleep 1s
done
gettimeofday "dekimberlize ending user interaction" >> /tmp/dekimberlize.log

echo
echo "The user has ended the session."


########################################################################
# Now clean up, tossing the dirty state and removing the port forwarding.
#


#
## Detach floppy disk image.  This must be done while the virtual
## machine is running.
#

if [ $floppy_original != "" ]; then
    echo
    echo "Detaching floppy disk from VM.."

    gettimeofday "dekimberlize detaching floppy from VM" >> /tmp/dekimberlize.log
    VBoxManage controlvm $1 floppyattach none
    if [ $? -ne 0 ]; then
        echo `basename $0`: error: failed attaching floppy disk
    fi
    gettimeofday "dekimberlize completed detaching floppy from VM" >> /tmp/dekimberlize.log
fi


#
## Power down VM as quickly as possible.
#

echo
echo "Powering VM $1 down.."
gettimeofday "dekimberlize powering down VM" >> /tmp/dekimberlize.log
VBoxManage controlvm $1 poweroff
if [ $? -ne 0 ]; then
    echo `basename $0`: error: failed powering VM down
    failure
fi


#
## Wait for powerdown to complete.
#

sleep_until_vm_stopped $1 30
if [ $? -ne 1 ]; then
    echo "VM did not stop! Stopping Dekimberlize process.."
    failure
fi
gettimeofday "dekimberlize completed powering down VM" >> /tmp/dekimberlize.log


#
## Unregister floppy disk image (registering is a side effect 
## of attachment).
#

if [ $floppy_original != "" ]; then
    echo
    echo "Unregistering floppy disk with VirtualBox.."

    gettimeofday "dekimberlize unregistering floppy disk" >> /tmp/dekimberlize.log
    VBoxManage unregisterimage floppy $floppy_copy
    if [ $? -ne 0 ]; then
        echo `basename $0`: error: failed attaching floppy disk
    fi
    gettimeofday "dekimberlize completed unregistering floppy disk" >> /tmp/dekimberlize.log
fi


#
## Calculate the binary difference of the floppy image against a copy
## of itself saved before attachment.
#

echo
echo "Calculating the floppy's binary difference in file '$floppy_diff'.."
gettimeofday "dekimberlize calculating floppy delta" >> /tmp/dekimberlize.log
xdelta delta $floppy_original $floppy_copy $floppy_diff
gettimeofday "dekimberlize completed calculating floppy delta" >> /tmp/dekimberlize.log


#
## Revert the snapshot taken in the Kimberlize process, restoring the
## virtual machine to its base image.
#

echo
echo "Discarding dirty state and restoring the original VM image.."
gettimeofday "dekimberlize reverting to base VM" >> /tmp/dekimberlize.log
VBoxManage snapshot $1 discardcurrent -all 
if [ $? -ne 0 ]; then
    echo `basename $0`: error: failed discarding VM state
    failure 
fi
gettimeofday "dekimberlize completed reverting to base VM" >> /tmp/dekimberlize.log

VBoxManage setextradata $1 "VBoxInternal/Devices/pcnet/0/LUN#0/Config/diamond_ssh/HostPort" > /dev/null
VBoxManage setextradata $1 "VBoxInternal/Devices/pcnet/0/LUN#0/Config/diamond_ssh/GuestPort" > /dev/null
VBoxManage setextradata $1 "VBoxInternal/Devices/pcnet/0/LUN#0/Config/diamond_ssh/Protocol" > /dev/null


rm -f /tmp/dekimberlize.lock


echo
echo "Complete!"

gettimeofday "dekimberlize completed" >> /tmp/dekimberlize.log

########################################################################
# Miscellaneous Information:
#
# *.vdi represent virtual disk images.  The oldest is the original install,
#   stored in a user's ~/.VirtualBox/VDI/ directory.  It is kept pristine.
#   The active difference file is updated whenever the virtual disk is written,
#   and copied to a saved file whenever a snapshot is taken.
#
# *.sav represent saved runtime state, including both in-memory and on-disk
#   changes.  During snapshot, the entire file is saved, with on-disk changes
#   also replicated into a .vdi file.  They average 200-300 MB.
#
# It is expected that the launcher running on a display will hoard the
# "generic" pristine .vdi file as well as the snapshotted memory state.
#
